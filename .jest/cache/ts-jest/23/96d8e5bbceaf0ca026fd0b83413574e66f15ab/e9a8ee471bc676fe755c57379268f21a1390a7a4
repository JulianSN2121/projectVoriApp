[["C:\\Users\\Julian\\Documents\\projectVoriApp\\src\\__tests__\\DiscoverScreen.test.tsx",{"fileContent":"import React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport DiscoverScreen from '../screens/DiscoverScreen';\r\n\r\n// Mock navigation\r\nconst navigationMock = {\r\n  navigate: jest.fn(),\r\n};\r\n\r\ndescribe('DiscoverScreen', () => {\r\n  it('renders correctly', () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    expect(getByText('Entdecke Vorarlberg')).toBeTruthy();\r\n  });\r\n\r\n  it('navigates to CategoryEntitiesScreen when a category is pressed', () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    fireEvent.press(getByText('Restaurants'));\r\n    expect(navigationMock.navigate).toHaveBeenCalledWith('CategoryEntitiesScreen', {\r\n      categoryType: 'Restaurants',\r\n      index: 0,\r\n    });\r\n  });\r\n\r\n  it('navigates to EventsScreen when the events category is pressed', () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    fireEvent.press(getByText('Events'));\r\n    expect(navigationMock.navigate).toHaveBeenCalledWith('EventsScreen', {\r\n      categoryType: 'Events',\r\n    });\r\n  });\r\n\r\n  it('navigates to EventInfoScreen when an event is pressed', async () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    await waitFor(() => {\r\n      fireEvent.press(getByText('Event 1'));\r\n    });\r\n    expect(navigationMock.navigate).toHaveBeenCalledWith('EventInfoScreen', {\r\n      eventData: expect.any(Object),\r\n    });\r\n  });\r\n\r\n  it('navigates to EntityInfoScreen when an entity is pressed', async () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    await waitFor(() => {\r\n      fireEvent.press(getByText('Restaurant 1'));\r\n    });\r\n    expect(navigationMock.navigate).toHaveBeenCalledWith('EntityInfoScreen', {\r\n      entityData: expect.any(Object),\r\n    });\r\n  });\r\n\r\n  it('filters search results correctly', async () => {\r\n    const { getByPlaceholderText, getByText, queryByText } = render(\r\n      <DiscoverScreen navigation={navigationMock} />,\r\n    );\r\n    const searchInput = getByPlaceholderText('Suchen...');\r\n\r\n    fireEvent.changeText(searchInput, 'Restaurant');\r\n    await waitFor(() => {\r\n      expect(getByText('Restaurant 1')).toBeTruthy();\r\n    });\r\n\r\n    fireEvent.changeText(searchInput, 'Non-existent');\r\n    await waitFor(() => {\r\n      expect(queryByText('No results found.')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('clears search results when the remove icon is pressed', async () => {\r\n    const { getByPlaceholderText, getByText, queryByText } = render(\r\n      <DiscoverScreen navigation={navigationMock} />,\r\n    );\r\n    const searchInput = getByPlaceholderText('Suchen...');\r\n\r\n    fireEvent.changeText(searchInput, 'Restaurant');\r\n    await waitFor(() => {\r\n      expect(getByText('Restaurant 1')).toBeTruthy();\r\n    });\r\n\r\n    fireEvent.press(getByText('remove'));\r\n    expect(queryByText('Restaurant 1')).toBeNull();\r\n  });\r\n});","resolvedModuleNames":["C:/Users/Julian/Documents/projectVoriApp/src/screens/DiscoverScreen.tsx","C:/Users/Julian/Documents/projectVoriApp/AppStyles.ts","C:/Users/Julian/Documents/projectVoriApp/src/components/Header.tsx","C:/Users/Julian/Documents/projectVoriApp/src/services/apiClient.ts","C:/Users/Julian/Documents/projectVoriApp/src/services/apiClient.ts"]}]]