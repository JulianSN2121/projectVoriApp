{"file":"C:\\Users\\Julian\\Documents\\projectVoriApp\\src\\__tests__\\DiscoverScreen.test.tsx","mappings":"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","names":[],"sources":["C:\\Users\\Julian\\Documents\\projectVoriApp\\src\\__tests__\\DiscoverScreen.test.tsx"],"sourcesContent":["import React from 'react';\r\nimport { render, fireEvent, waitFor } from '@testing-library/react-native';\r\nimport DiscoverScreen from '../screens/DiscoverScreen';\r\n\r\n// Mock navigation\r\nconst navigationMock = {\r\n  navigate: jest.fn(),\r\n};\r\n\r\ndescribe('DiscoverScreen', () => {\r\n  it('renders correctly', () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    expect(getByText('Entdecke Vorarlberg')).toBeTruthy();\r\n  });\r\n\r\n  it('navigates to CategoryEntitiesScreen when a category is pressed', () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    fireEvent.press(getByText('Restaurants'));\r\n    expect(navigationMock.navigate).toHaveBeenCalledWith('CategoryEntitiesScreen', {\r\n      categoryType: 'Restaurants',\r\n      index: 0,\r\n    });\r\n  });\r\n\r\n  it('navigates to EventsScreen when the events category is pressed', () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    fireEvent.press(getByText('Events'));\r\n    expect(navigationMock.navigate).toHaveBeenCalledWith('EventsScreen', {\r\n      categoryType: 'Events',\r\n    });\r\n  });\r\n\r\n  it('navigates to EventInfoScreen when an event is pressed', async () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    await waitFor(() => {\r\n      fireEvent.press(getByText('Event 1'));\r\n    });\r\n    expect(navigationMock.navigate).toHaveBeenCalledWith('EventInfoScreen', {\r\n      eventData: expect.any(Object),\r\n    });\r\n  });\r\n\r\n  it('navigates to EntityInfoScreen when an entity is pressed', async () => {\r\n    const { getByText } = render(<DiscoverScreen navigation={navigationMock} />);\r\n    await waitFor(() => {\r\n      fireEvent.press(getByText('Restaurant 1'));\r\n    });\r\n    expect(navigationMock.navigate).toHaveBeenCalledWith('EntityInfoScreen', {\r\n      entityData: expect.any(Object),\r\n    });\r\n  });\r\n\r\n  it('filters search results correctly', async () => {\r\n    const { getByPlaceholderText, getByText, queryByText } = render(\r\n      <DiscoverScreen navigation={navigationMock} />,\r\n    );\r\n    const searchInput = getByPlaceholderText('Suchen...');\r\n\r\n    fireEvent.changeText(searchInput, 'Restaurant');\r\n    await waitFor(() => {\r\n      expect(getByText('Restaurant 1')).toBeTruthy();\r\n    });\r\n\r\n    fireEvent.changeText(searchInput, 'Non-existent');\r\n    await waitFor(() => {\r\n      expect(queryByText('No results found.')).toBeTruthy();\r\n    });\r\n  });\r\n\r\n  it('clears search results when the remove icon is pressed', async () => {\r\n    const { getByPlaceholderText, getByText, queryByText } = render(\r\n      <DiscoverScreen navigation={navigationMock} />,\r\n    );\r\n    const searchInput = getByPlaceholderText('Suchen...');\r\n\r\n    fireEvent.changeText(searchInput, 'Restaurant');\r\n    await waitFor(() => {\r\n      expect(getByText('Restaurant 1')).toBeTruthy();\r\n    });\r\n\r\n    fireEvent.press(getByText('remove'));\r\n    expect(queryByText('Restaurant 1')).toBeNull();\r\n  });\r\n});"],"version":3}