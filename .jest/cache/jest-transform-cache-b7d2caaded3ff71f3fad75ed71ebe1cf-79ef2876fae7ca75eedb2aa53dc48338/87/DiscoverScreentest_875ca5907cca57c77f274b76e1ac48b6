b6678f74fe860d077eb41675440bd1ea
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_native_1 = require("@testing-library/react-native");
const DiscoverScreen_1 = __importDefault(require("../screens/DiscoverScreen"));
// Mock navigation
const navigationMock = {
    navigate: jest.fn(),
};
describe('DiscoverScreen', () => {
    it('renders correctly', () => {
        const { getByText } = (0, react_native_1.render)(<DiscoverScreen_1.default navigation={navigationMock}/>);
        expect(getByText('Entdecke Vorarlberg')).toBeTruthy();
    });
    it('navigates to CategoryEntitiesScreen when a category is pressed', () => {
        const { getByText } = (0, react_native_1.render)(<DiscoverScreen_1.default navigation={navigationMock}/>);
        react_native_1.fireEvent.press(getByText('Restaurants'));
        expect(navigationMock.navigate).toHaveBeenCalledWith('CategoryEntitiesScreen', {
            categoryType: 'Restaurants',
            index: 0,
        });
    });
    it('navigates to EventsScreen when the events category is pressed', () => {
        const { getByText } = (0, react_native_1.render)(<DiscoverScreen_1.default navigation={navigationMock}/>);
        react_native_1.fireEvent.press(getByText('Events'));
        expect(navigationMock.navigate).toHaveBeenCalledWith('EventsScreen', {
            categoryType: 'Events',
        });
    });
    it('navigates to EventInfoScreen when an event is pressed', async () => {
        const { getByText } = (0, react_native_1.render)(<DiscoverScreen_1.default navigation={navigationMock}/>);
        await (0, react_native_1.waitFor)(() => {
            react_native_1.fireEvent.press(getByText('Event 1'));
        });
        expect(navigationMock.navigate).toHaveBeenCalledWith('EventInfoScreen', {
            eventData: expect.any(Object),
        });
    });
    it('navigates to EntityInfoScreen when an entity is pressed', async () => {
        const { getByText } = (0, react_native_1.render)(<DiscoverScreen_1.default navigation={navigationMock}/>);
        await (0, react_native_1.waitFor)(() => {
            react_native_1.fireEvent.press(getByText('Restaurant 1'));
        });
        expect(navigationMock.navigate).toHaveBeenCalledWith('EntityInfoScreen', {
            entityData: expect.any(Object),
        });
    });
    it('filters search results correctly', async () => {
        const { getByPlaceholderText, getByText, queryByText } = (0, react_native_1.render)(<DiscoverScreen_1.default navigation={navigationMock}/>);
        const searchInput = getByPlaceholderText('Suchen...');
        react_native_1.fireEvent.changeText(searchInput, 'Restaurant');
        await (0, react_native_1.waitFor)(() => {
            expect(getByText('Restaurant 1')).toBeTruthy();
        });
        react_native_1.fireEvent.changeText(searchInput, 'Non-existent');
        await (0, react_native_1.waitFor)(() => {
            expect(queryByText('No results found.')).toBeTruthy();
        });
    });
    it('clears search results when the remove icon is pressed', async () => {
        const { getByPlaceholderText, getByText, queryByText } = (0, react_native_1.render)(<DiscoverScreen_1.default navigation={navigationMock}/>);
        const searchInput = getByPlaceholderText('Suchen...');
        react_native_1.fireEvent.changeText(searchInput, 'Restaurant');
        await (0, react_native_1.waitFor)(() => {
            expect(getByText('Restaurant 1')).toBeTruthy();
        });
        react_native_1.fireEvent.press(getByText('remove'));
        expect(queryByText('Restaurant 1')).toBeNull();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,